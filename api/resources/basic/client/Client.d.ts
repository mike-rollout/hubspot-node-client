/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as RolloutApi from "../../..";
export declare namespace Basic {
    interface Options {
        environment?: core.Supplier<environments.RolloutApiEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        privateAppLegacy: core.Supplier<string>;
        privateApp: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Basic {
    protected readonly _options: Basic.Options;
    constructor(_options: Basic.Options);
    /**
     * Read an Object identified by `{contactId}`. `{contactId}` refers to the internal object ID. Control what is returned via the `properties` query param.
     *
     * @example
     *     await rolloutApi.basic.getCrmV3ObjectsContactsContactIdGetById("contactId", {})
     */
    getCrmV3ObjectsContactsContactIdGetById(contactId: string, request?: RolloutApi.GetCrmV3ObjectsContactsContactIdGetByIdRequest, requestOptions?: Basic.RequestOptions): Promise<RolloutApi.SimplePublicObjectWithAssociations>;
    /**
     * Move an Object identified by `{contactId}` to the recycling bin.
     *
     * @example
     *     await rolloutApi.basic.deleteCrmV3ObjectsContactsContactIdArchive("contactId")
     */
    deleteCrmV3ObjectsContactsContactIdArchive(contactId: string, requestOptions?: Basic.RequestOptions): Promise<void>;
    /**
     * Perform a partial update of an Object identified by `{contactId}`. `{contactId}` refers to the internal object ID. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
     *
     * @example
     *     await rolloutApi.basic.patchCrmV3ObjectsContactsContactIdUpdate("contactId", {
     *         properties: {
     *             "email": "bcooper@biglytics.net",
     *             "phone": "(877) 929-0687",
     *             "company": "Biglytics",
     *             "website": "biglytics.net",
     *             "lastname": "Cooper",
     *             "firstname": "Bryan"
     *         }
     *     })
     */
    patchCrmV3ObjectsContactsContactIdUpdate(contactId: string, request: RolloutApi.SimplePublicObjectInput, requestOptions?: Basic.RequestOptions): Promise<RolloutApi.SimplePublicObject>;
    /**
     * Read a page of contacts. Control what is returned via the `properties` query param.
     *
     * @example
     *     await rolloutApi.basic.getCrmV3ObjectsContactsGetPage({})
     */
    getCrmV3ObjectsContactsGetPage(request?: RolloutApi.GetCrmV3ObjectsContactsGetPageRequest, requestOptions?: Basic.RequestOptions): Promise<RolloutApi.CollectionResponseSimplePublicObjectWithAssociationsForwardPaging>;
    /**
     * Create a contact with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard contacts is provided.
     *
     * @example
     *     await rolloutApi.basic.postCrmV3ObjectsContactsCreate({
     *         associations: [{
     *                 types: [{
     *                         associationCategory: RolloutApi.AssociationSpecAssociationCategory.HubspotDefined,
     *                         associationTypeId: 1
     *                     }],
     *                 to: {
     *                     id: "id"
     *                 }
     *             }],
     *         properties: {
     *             "email": "bcooper@biglytics.net",
     *             "phone": "(877) 929-0687",
     *             "company": "Biglytics",
     *             "website": "biglytics.net",
     *             "lastname": "Cooper",
     *             "firstname": "Bryan"
     *         }
     *     })
     */
    postCrmV3ObjectsContactsCreate(request: RolloutApi.SimplePublicObjectInputForCreate, requestOptions?: Basic.RequestOptions): Promise<RolloutApi.SimplePublicObject>;
    protected _getAuthorizationHeader(): Promise<string>;
}
